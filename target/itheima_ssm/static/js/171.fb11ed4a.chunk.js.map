{"version":3,"file":"static/js/171.fb11ed4a.chunk.js","mappings":"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","sources":["pages/User/Register.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Form, Input, message, Switch, Select, Layout, Radio} from 'antd';\r\nimport './index.scss'\r\nimport Cookie from 'js-cookie';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {\r\n    queryDepartmentMessage,\r\n    queryLeaderMessage,\r\n    queryDepartmentUsername,\r\n    queryLeaderUsername,\r\n    queryTeacherUsername,\r\n    teacherRegister,\r\n    departmentRegister,\r\n    leaderRegister,\r\n    teacherLogin,\r\n    departmentLogin,\r\n    leaderLogin\r\n} from \"../../component/axios/api\";\r\nimport NProgress from 'nprogress'\r\nimport 'nprogress/nprogress.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {teacher, department, leader} from \"../../component/redux/userTypeSlice\";\r\nimport {login} from \"../../component/redux/isLoginSlice\";\r\n\r\nconst {Header, Footer, Content} = Layout;\r\n\r\nconst RegisterStudent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [form] = Form.useForm();\r\n    const username = Form.useWatch('username', form);\r\n    const password = Form.useWatch('password', form);\r\n    const enterPassword = Form.useWatch('enterPassword', form);\r\n    const realeName = Form.useWatch('realeName', form);\r\n    const gender = Form.useWatch('gender', form);\r\n    const tel = Form.useWatch('tel', form);\r\n    const email = Form.useWatch('email', form);\r\n    const departmentUid = Form.useWatch('departmentUid', form);\r\n    const leaderUid = Form.useWatch('leaderUid', form);\r\n    const rememberme = Form.useWatch('rememberme', form);\r\n\r\n    const [departmentOptions, setDepartmentOptions] = useState([]);\r\n    const [leaderOptions, setLeaderOptions] = useState([]);\r\n    const [registerType, setRegisterType] = useState('teacher');\r\n    const [usernameUse, setUsernameUse] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    const onFinish = () => {\r\n        if (!usernameUse) {\r\n            message.error(\"用户名已存在，请重新输入\")\r\n            return\r\n        }\r\n        if (password !== enterPassword) {\r\n            message.error(\"两次密码输入不一致\");\r\n            return\r\n        }\r\n        NProgress.inc();\r\n        switch (registerType) {\r\n            case 'teacher':\r\n                registerTeacher()\r\n                break\r\n            case 'department':\r\n                registerDepartment()\r\n                break\r\n            case 'leader':\r\n                registerLeader()\r\n                break\r\n            default:\r\n                message.error(\"系统错误，请选择正确的注册类型\");\r\n                break;\r\n        }\r\n    };\r\n\r\n    const registerTeacher = () => {\r\n        teacherRegister(username, password, realeName, gender, tel, email, departmentUid).then(res => {\r\n            message.success(res.msg)\r\n            loginAutomatic(registerType)\r\n        })\r\n    }\r\n\r\n    const registerDepartment = () => {\r\n        departmentRegister(username, password, realeName, gender, tel, email, leaderUid).then(res => {\r\n            message.success(res.msg);\r\n            loginAutomatic(registerType)\r\n        })\r\n    }\r\n\r\n    const registerLeader = () => {\r\n        leaderRegister(username, password, realeName, gender, tel, email).then(res => {\r\n            message.success(res.msg);\r\n            loginAutomatic(registerType)\r\n        })\r\n    }\r\n\r\n    const loginAutomatic = e => {\r\n        if (rememberme) {\r\n            switch (e) {\r\n                case 'teacher':\r\n                    teacherLogin(username, password).then(res => {\r\n                        if (res.code === 200) {\r\n                            dispatch(teacher())\r\n                            message.success(res.msg);\r\n                            loginSuccess(\"teacher\")\r\n                            isRemember()\r\n                            navigate('/home/teacher')\r\n                        } else {\r\n                            message.error(res.msg);\r\n                            navigate('/login')\r\n                        }\r\n                        NProgress.done(true);\r\n                    })\r\n                    break\r\n                case 'department':\r\n                    departmentLogin(username, password).then(res => {\r\n                        if (res.code === 200) {\r\n                            dispatch(department())\r\n                            message.success(res.msg);\r\n                            loginSuccess(\"department\")\r\n                            isRemember()\r\n                            navigate('/home/department')\r\n                        } else {\r\n                            message.error(res.msg);\r\n                            navigate('/login')\r\n                        }\r\n                        NProgress.done(true);\r\n                    })\r\n                    break\r\n                case 'leader':\r\n                    leaderLogin(username, password).then(res => {\r\n                        if (res.code === 200) {\r\n                            dispatch(leader())\r\n                            message.success(res.msg);\r\n                            loginSuccess(\"leader\")\r\n                            isRemember()\r\n                            navigate('/home/leader')\r\n                        } else {\r\n                            message.error(res.msg);\r\n                            navigate('/login')\r\n                        }\r\n                        NProgress.done(true);\r\n                    })\r\n                    break\r\n                default:\r\n                    message.error(\"系统错误，请选择正确的注册类型\");\r\n                    break\r\n            }\r\n        } else {\r\n            navigate('/login')\r\n        }\r\n        NProgress.done(true);\r\n    }\r\n\r\n    const loginSuccess = e => {\r\n        dispatch(login())\r\n        Cookie.set('userType', e, {expires: 7, path: '/', sameSite: 'strict'})\r\n    }\r\n\r\n    const isRemember = () => {\r\n        Cookie.set('username', username, {expires: 7, path: '/', sameSite: 'strict'});\r\n        Cookie.set('password', password, {expires: 7, path: '/', sameSite: 'strict'});\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    };\r\n\r\n    const checkUsername = e => {\r\n        switch (registerType) {\r\n            case 'teacher':\r\n                queryTeacherUsername(e.target.value).then(res => {\r\n                    if (res.code !== 200) {\r\n                        setUsernameUse(false)\r\n                        message.error(res.msg)\r\n                    } else {\r\n                        setUsernameUse(true)\r\n                    }\r\n                })\r\n                break;\r\n            case 'department':\r\n                queryDepartmentUsername(e.target.value).then(res => {\r\n                    if (res.code !== 200) {\r\n                        setUsernameUse(false)\r\n                        message.error(res.msg)\r\n                    } else {\r\n                        setUsernameUse(true)\r\n                    }\r\n                })\r\n                break;\r\n            case 'leader':\r\n                queryLeaderUsername(e.target.value).then(res => {\r\n                    if (res.code !== 200) {\r\n                        setUsernameUse(false)\r\n                        message.error(res.msg)\r\n                    } else {\r\n                        setUsernameUse(true)\r\n                    }\r\n                })\r\n                break;\r\n            default:\r\n                message.error(\"系统错误，请选择正确的注册类型\");\r\n                break\r\n        }\r\n    }\r\n\r\n\r\n    const getDepartmentOptions = () => {\r\n        NProgress.inc();\r\n        queryDepartmentMessage().then(res => {\r\n            NProgress.done(true);\r\n            const options = res.body.map(item => {\r\n                return {\r\n                    value: item.uid,\r\n                    label: item.realeName\r\n                }\r\n            })\r\n            setDepartmentOptions(options)\r\n        })\r\n    }\r\n\r\n    const getLeaderOptions = () => {\r\n        NProgress.inc();\r\n        queryLeaderMessage().then(res => {\r\n            NProgress.done(true);\r\n            const options = res.body.map(item => {\r\n                return {\r\n                    value: item.uid,\r\n                    label: item.realeName\r\n                }\r\n            })\r\n            setLeaderOptions(options)\r\n        })\r\n    }\r\n\r\n    // 动态渲染不同注册所需要填写的表单\r\n    const RenderField = () => {\r\n        return registerType === 'teacher' ? (<Form.Item\r\n            label=\"部门\"\r\n            name=\"departmentUid\"\r\n            rules={[\r\n                {\r\n                    required: true,\r\n                    message: '请选择您的上级部门',\r\n                },\r\n            ]}\r\n        >\r\n            <Select\r\n                showSearch\r\n                style={{\r\n                    width: '100%',\r\n                }}\r\n                onFocus={getDepartmentOptions}\r\n                placeholder=\"请选择你的上级部门\"\r\n                options={departmentOptions}\r\n            />\r\n        </Form.Item>) : registerType === 'department' ? (<Form.Item\r\n            label=\"领导\"\r\n            name=\"leaderUid\"\r\n            rules={[\r\n                {\r\n                    required: true,\r\n                    message: '请选择您的上级领导',\r\n                },\r\n            ]}\r\n        >\r\n            <Select\r\n                showSearch\r\n                style={{\r\n                    width: '100%',\r\n                }}\r\n                placeholder=\"请选择您的上级领导\"\r\n                onFocus={getLeaderOptions}\r\n                options={leaderOptions}\r\n            />\r\n        </Form.Item>) : null\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            form={form}\r\n            name=\"login\"\r\n            labelCol={{\r\n                span: 8,\r\n            }}\r\n            wrapperCol={{\r\n                span: 8,\r\n            }}\r\n            onFinish={onFinish}\r\n            initialValues={{\r\n                gender: \"男\",\r\n                rememberme: true,\r\n            }}\r\n        >\r\n            <Form.Item\r\n                wrapperCol={{}}\r\n            >\r\n                <Radio.Group defaultValue=\"teacher\" buttonStyle=\"solid\" onChange={e => {\r\n                    setRegisterType(e.target.value)\r\n                }}>\r\n                    <Radio.Button value=\"leader\">领导注册</Radio.Button>\r\n                    <Radio.Button value=\"department\">部门注册</Radio.Button>\r\n                    <Radio.Button value=\"teacher\">教师注册</Radio.Button>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"用户名\"\r\n                name=\"username\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '请填写用户名（不超过20字符）',\r\n                        pattern: /^[a-zA-Z0-9]{1,20}$/\r\n                    },\r\n                ]}\r\n            >\r\n                <Input showCount maxLength={20} allowClear={true} onChange={e => {\r\n                    checkUsername(e)\r\n                }}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"密码\"\r\n                name=\"password\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '密码必须为8-20位字母或数字',\r\n                        pattern: /^[a-zA-Z0-9]{8,20}$/\r\n                    },\r\n                ]}\r\n            >\r\n                <Input.Password showCount maxLength={20} allowClear={true}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"确认密码\"\r\n                name=\"enterPassword\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '密码必须为8-20位字母或数字',\r\n                        pattern: /^[a-zA-Z0-9]{8,20}$/\r\n                    },\r\n                ]}\r\n            >\r\n                <Input.Password showCount maxLength={20} allowClear={true}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"真实姓名\"\r\n                name=\"realeName\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '请输入您的真实姓名',\r\n                        pattern: /^[\\u4e00-\\u9fa5]{2,4}$/\r\n                    },\r\n                ]}\r\n            >\r\n                <Input showCount maxLength={4} allowClear={true}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"性别\"\r\n                name=\"gender\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '请选择您的性别',\r\n                    },\r\n                ]}\r\n            >\r\n                <Radio.Group buttonStyle=\"solid\" style={{display: \"flex\"}}>\r\n                    <Radio.Button value=\"男\">男</Radio.Button>\r\n                    <Radio.Button value=\"女\">女</Radio.Button>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"联系电话\"\r\n                name=\"tel\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '请输入您的联系电话',\r\n                        pattern: /^1[3456789]\\d{9}$/\r\n                    },\r\n                ]}\r\n            >\r\n                <Input type={\"tel\"} showCount maxLength={11} allowClear={true}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"电子邮件\"\r\n                name=\"email\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '请输入您的电子邮件地址',\r\n                        pattern: /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input type={\"email\"} showCount maxLength={30} allowClear={true}/>\r\n            </Form.Item>\r\n\r\n            {RenderField()}\r\n\r\n            <Form.Item\r\n                label={\"是否自动登录\"}\r\n                name='rememberme'\r\n                valuePropName='checked'\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: '请选择是否自动登录',\r\n                    },\r\n                ]}\r\n            >\r\n                <Switch style={{display: \"flex\"}} checkedChildren=\"是\" unCheckedChildren=\"否\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                wrapperCol={{}}\r\n            >\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    注册\r\n                </Button>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <Button htmlType=\"button\" onClick={onReset}>\r\n                    重置\r\n                </Button>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <Button htmlType=\"button\" onClick={() => {\r\n                    navigate('/login')\r\n                }}>\r\n                    登录\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n};\r\n\r\nconst DepartmentLogin = () => {\r\n    return (\r\n        <Layout>\r\n            <Header>\r\n                <span>校园 OA 系统注册</span>\r\n            </Header>\r\n            <Content>\r\n                <RegisterStudent/>\r\n            </Content>\r\n            <Footer>校园 OA 系统 &copy; 2022 Created By allynlin</Footer>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default DepartmentLogin;"],"names":["Header","Layout","Footer","Content","RegisterStudent","dispatch","useDispatch","Form","form","username","password","enterPassword","realeName","gender","tel","email","departmentUid","leaderUid","rememberme","useState","departmentOptions","setDepartmentOptions","leaderOptions","setLeaderOptions","registerType","setRegisterType","usernameUse","setUsernameUse","navigate","useNavigate","registerTeacher","teacherRegister","then","res","message","msg","loginAutomatic","registerDepartment","departmentRegister","registerLeader","leaderRegister","e","teacherLogin","code","teacher","loginSuccess","isRemember","NProgress","departmentLogin","department","leaderLogin","leader","login","Cookie","expires","path","sameSite","getDepartmentOptions","queryDepartmentMessage","options","body","map","item","value","uid","label","getLeaderOptions","queryLeaderMessage","name","labelCol","span","wrapperCol","onFinish","initialValues","defaultValue","buttonStyle","onChange","target","rules","required","pattern","showCount","maxLength","allowClear","queryTeacherUsername","queryDepartmentUsername","queryLeaderUsername","checkUsername","style","display","type","showSearch","width","onFocus","placeholder","valuePropName","checkedChildren","unCheckedChildren","htmlType","onClick","resetFields"],"sourceRoot":""}